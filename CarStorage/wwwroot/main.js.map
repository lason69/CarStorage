{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,uDAAuD,kBAAkB,gDAAgD,sBAAsB,KAAK,YAAY,kBAAkB,gDAAgD,2BAA2B,KAAK,UAAU,kBAAkB,KAAK,+BAA+B,kBAAkB,oCAAoC,KAAK,gCAAgC,gDAAgD,KAAK,K;;;;;;;;;;;ACAld,wBAAwB,OAAO,sGAAsG,OAAO,uB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA1F;AACb;AACiD;AAQtF;IAKE,sBAAoB,YAAkB;QAAlB,iBAAY,GAAZ,YAAY,CAAM;QACtC,cAAS,GAAa,EAAE,CAAC;IADiB,CAAC;IAE3C,+BAAQ,GAAR;QAAA,iBA4BC;QA3BC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,SAAS,CAAC,gBAAM;YACrD,KAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,EAAc,CAAC;YAC3C,KAAI,CAAC,cAAc,GAAG;gBACpB;oBACE,KAAK,EAAE,OAAO;oBACd,MAAM,EAAE,OAAO;oBACf,iBAAiB,EAAE,CAAC;oBACpB,cAAc,EAAE,+DAAmB,CAAC,KAAK;iBAC1C;gBACD,gBAAgB;gBAChB;oBACE,UAAU,EAAE,GAAG;oBACf,KAAK,EAAE,MAAM;oBACb,MAAM,EAAE,OAAO;oBACf,YAAY,EAAE,EAAE;oBAChB,iBAAiB,EAAE,EAAE;oBACrB,gBAAgB,EAAE,EAAE;oBACpB,eAAe,EAAE,EAAE;iBACpB;gBACD,gBAAgB;gBAChB;oBACE,UAAU,EAAE,GAAG;oBACf,OAAO,EAAE,KAAK;iBACf;aACF,CAAC;QAEJ,CAAC,CAAC,CAAC;IACL,CAAC;IAnCU,YAAY;QANxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;yCAOkC,kDAAI;OAL3B,YAAY,CAoCxB;IAAD,mBAAC;CAAA;AApCwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACViC;AACjB;AACI;AACF;AACI;AACA;AAgB/C;IAAA;IAAyB,CAAC;IAAb,SAAS;QAdrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;aACb;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,0DAAW;gBACX,wDAAU;gBACV,4DAAgB;aAEjB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;ACrBtB;AAAA;AAAA,gFAAgF;AAChF,2EAA2E;AAC3E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;GAKG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,qEAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,oEAAc,EAAE,CAAC;AACnB,CAAC;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"/* Application-wide Styles */\\r\\nh1 {\\r\\n  color: #369;\\r\\n  font-family: Arial, Helvetica, sans-serif;\\r\\n  font-size: 250%;\\r\\n}\\r\\nh2, h3 {\\r\\n  color: #444;\\r\\n  font-family: Arial, Helvetica, sans-serif;\\r\\n  font-weight: lighter;\\r\\n}\\r\\nbody {\\r\\n  margin: 2em;\\r\\n}\\r\\nbody, input[text], button {\\r\\n  color: #888;\\r\\n  font-family: Cambria, Georgia;\\r\\n}\\r\\n/* everywhere else */\\r\\n* {\\r\\n  font-family: Arial, Helvetica, sans-serif;\\r\\n}\\r\\n\"","module.exports = \"<h1>{{title}}</h1>\\r\\n\\r\\n<h1>Who rulez beside of jasza?</h1>\\r\\n<ul>\\r\\n  <li *ngFor=\\\"let value of apiValues\\\">{{value}}</li>\\r\\n</ul>\\r\\n\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Http } from '@angular/http';\r\nimport { NgxGalleryOptions, NgxGalleryImage, NgxGalleryAnimation } from 'ngx-gallery';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\n\r\nexport class AppComponent implements OnInit {\r\n\r\n  galleryOptions: NgxGalleryOptions[];\r\n  galleryImages: NgxGalleryImage[];\r\n\r\n  constructor(private _httpService: Http) { }\r\n  apiValues: string[] = [];\r\n  ngOnInit() {\r\n    this._httpService.get('/api/MainPage').subscribe(values => {\r\n      this.apiValues = values.json() as string[];\r\n      this.galleryOptions = [\r\n        {\r\n          width: '600px',\r\n          height: '400px',\r\n          thumbnailsColumns: 4,\r\n          imageAnimation: NgxGalleryAnimation.Slide\r\n        },\r\n        // max-width 800\r\n        {\r\n          breakpoint: 800,\r\n          width: '100%',\r\n          height: '600px',\r\n          imagePercent: 80,\r\n          thumbnailsPercent: 20,\r\n          thumbnailsMargin: 20,\r\n          thumbnailMargin: 20\r\n        },\r\n        // max-width 400\r\n        {\r\n          breakpoint: 400,\r\n          preview: false\r\n        }\r\n      ];\r\n\r\n    });\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpModule } from '@angular/http';\nimport { NgxGalleryModule } from 'ngx-gallery';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\r\n    HttpModule,\n    NgxGalleryModule\n\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, for easier debugging, you can ignore zone related error\n * stack frames such as `zone.run`/`zoneDelegate.invokeTask` by importing the\n * below file. Don't forget to comment it out in production mode\n * because it will have a performance impact when errors are thrown\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}